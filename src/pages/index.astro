---
import { getCollection } from 'astro:content';
// Component Imports
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import MainNav from '../components/MainNav.astro'; // logo, nav
import BookPostPreview from '../components/BookPostPreview.astro';

// Component Script:
// You can write any JavaScript/TypeScript that you'd like here.
// It will run during the build, but never in the browser.
// All variables are available to use in the HTML template below.
// let title = "Kyle Johnston's Bookshelf";
let pageTitle = "Kyle Johnston's Bookshelf"
let description = 'A running list of the books I\'ve read.';
let permalink = 'https://bookshelf.kylewjohnston.com/';

// Data Fetching: List all Markdown posts in the repo.
// let allPosts = await Astro.glob('./book/*.md');
// allPosts = allPosts.sort((a, b) => new Date(b.frontmatter.added).valueOf() - new Date(a.frontmatter.added).valueOf());

// New: Use Content Collections to list all posts from src/content/book
const books = (await getCollection('book')).sort(
	(a, b) => b.data.added.valueOf() - a.data.added.valueOf()
);


// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<html lang="en">
	<head>
		<BaseHead {pageTitle} {description} {permalink} />
	</head>

	<body>
		<MainNav /> <!-- logo, nav -->
		<main class="content">
		<div class="search-wrapper">
			<input type="text" id="searchInput" placeholder="Search title, author, year, or notesâ€¦" class="search-input" transition:name="search" transition:persist>
			<button id="clearButton" class="search-clear absolute right inset-y-0">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-white w-5 h-5">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
				</svg>
			</button>
		</div>
		<section aria-label="Bookshelf" id="view-container" class="book-grid">
				{books.map((p) => <BookPostPreview post={p} />)}
			</section>
		</main>
		<Footer />
	</body>
</html>
<script>
function initializeSearch() {
  const searchInput = document.getElementById('searchInput');
  const clearButton = document.getElementById('clearButton');
  const viewContainer = document.getElementById('view-container');
  let results = Array.from(viewContainer.getElementsByClassName('searchable'));
  const initialResults = results.slice();

  searchInput.addEventListener('input', debounce(search, 300));
  searchInput.addEventListener('input', toggleClearButton);
  clearButton.addEventListener('click', clearSearch);
  document.addEventListener('keydown', handleKeyDown);
  document.addEventListener('keydown', handleFocus);

  function search() {
    const searchText = searchInput.value.trim().toLowerCase();
    results.forEach(function(result) {
      const text = result.textContent.toLowerCase();
      const isMatch = text.includes(searchText);
      result.classList.toggle('hidden', !isMatch);
    });
    toggleClearButton();
  }

  function clearSearch() {
    searchInput.value = '';
    results = initialResults.slice();
    results.forEach(function(result) {
      result.classList.remove('hidden');
    });
    toggleClearButton();
  }

  function toggleClearButton() {
    clearButton.style.display = searchInput.value === '' ? 'none' : 'block';
  }

  function handleKeyDown(event) {
    if (event.key === 'Escape') {
      clearSearch();
      searchInput.blur();
    }
  }

  function handleFocus(event) {
    if (event.key === '/' && !searchInput.matches(':focus')) {
      event.preventDefault();
      searchInput.focus();
    }
  }

  // Debounce function to delay search execution
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
}

// Initialize search functionality for the initial view
initializeSearch();
document.addEventListener('astro:after-swap', initializeSearch);

</script>
