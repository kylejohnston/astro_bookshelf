---
// Homepage - display a paginated list of books 
import { getCollection } from 'astro:content';
import BaseHead from '@components/BaseHead.astro';
import Footer from '@components/Footer.astro';
import MainNav from '@components/MainNav.astro'; // logo, nav
import BookShelf from '@components/BookShelf.astro';
import Search from "astro-pagefind/components/Search";

let pageTitle = "Kyle Johnston's Bookshelf"
let description = 'A running list of the books I\'ve read.';
let permalink = 'https://books.kyleio.com/';

// 1. Generate a new path for every collection entry
export async function getStaticPaths({ paginate }) {
  const books = (await getCollection('book')).sort(
  (a, b) => b.data.added.valueOf() - a.data.added.valueOf()
  );
  return paginate(books, { pageSize: 24 });
}

// 2. When it's time to render, you can get the entry directly from the prop
const { page } = Astro.props;
// const { Content } = await book.render();
---

<html lang="en">
<head>
  <BaseHead {pageTitle} {description} {permalink} />
</head>
<body>
  <MainNav /> <!-- logo, nav -->
  <main class="content">
    
    <div class="pagination pt-4 md:pt-8">
      <Search id="search" className="pagefind-ui" uiOptions={{ showImages: false }} />
    </div>
    <section aria-label="Bookshelf" id="view-container" class="book-grid">
      {page.data.map((books) => <BookShelf post={books} />)}
    </section>
    <div class="pagination pb-4 md:pb-8">
      <div class="flex gap-4 items-center">
        {page.url.prev ? 
          <a href={page.url.prev} aria-label="Previous page">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5" class="w-7 h-7 md:w-10 md:h-10">
              <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
            </svg>
          </a> 
          : 
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-7 h-7 md:w-10 md:h-10">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
          </svg>
        }
        Page {page.currentPage} of {page.lastPage}
        {page.url.next ? 
          <a href={page.url.next} class="stroke-gray-200" aria-label="Next page">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-7 h-7 md:w-10 md:h-10">
              <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
            </svg>
          </a> 
          : 
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-7 h-7 md:w-10 md:h-10">
            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
          </svg>
        }
      </div>
    </div>
  </main>
  <Footer />
</body>
</html>

<style>
  :root {
    --pagefind-ui-scale: 0.8;
    --pagefind-ui-border: rgb(212 212 212);
    --pagefind-ui-border-radius: 12px;
  }
  input { @apply rounded-full;}
  .pagination {
    @apply
    flex
    justify-center
    md:justify-between
    items-center
    font-headline
    uppercase
    px-4
    md:px-8
    text-lg
    md:text-2xl
    text-gray-700
  }
  .book-grid {
    @apply 
    px-4
    py-4
    gap-4
    grid
    grid-cols-2
    md:grid-cols-4
    md:px-8
    md:py-8
    md:gap-8;
  }
  .book-grid article {
    @apply
    flex
    content-between;
  }
  .book-grid article a:hover {
    @apply
    no-underline;
  }
</style>
